MILONGA_DEBUG

# 21/07/2016
#
# Script for teste4 case.
#
# Set transient time to infinite, so milonga will
# wait for OpenFOAM until it ends.
# end_time = infinite
static_steps = 1000

# Make dt = 1. This does not affect milonga calculations
# since it solves a steady-state problem.
# Set for making time-steps named files.
# dt = 1

#PRINT %g step_static

IF step_static=1

   MESH NAME celula FILE_PATH ../../malhas/celula.msh

   MILONGA_PROBLEM FORMULATION diffusion SCHEME volumes DIMENSIONS 3 GROUPS 2

   PRINT "\# Number of cells: " %.0f cells

   VECTOR vec_d SIZE cells

   FUNCTION T(x,y,z) MESH celula CELLS VECTOR vec_T
   FUNCTION Q(x,y,z) MESH celula CELLS VECTOR vec_Q

   WRITE SHM_OBJECT potencias vec_Q
   WRITE SHM_OBJECT temperaturas vec_T
   WRITE SHM_OBJECT densidades vec_d

   SEM calcMil POST
   SEM calcMil WAIT
   
ELSE

# Não se pode dar valores para os vetores neste ponto
# ou serão re-escritos nas outras iterações.
# Na primeira vez, o OpenFOAM tem que passar os
# perfis ou o OpenFOAM é quem deve escrever os arquivos
# de memória compartilhada.


SEM calcOf WAIT

READ SHM_OBJECT temperaturas vec_T
#PRINT_VECTOR vec_T

PRINT TEXT "\# temperatures read from OpenFOAM."

# Inclusao das funcoes de interpolacao
INCLUDE functions.was

MATERIAL fuel {
D1	     d_1_fuel(T(x,y,z))
SigmaA1      SigmaA_1_fuel(T(x,y,z))
nuSigmaF1    SigmanuF_1_fuel(T(x,y,z))
eSigmaF1     1
SigmaS1.1    SigmaS1.1_fuel(T(x,y,z))
SigmaS1.2    SigmaS1.2_fuel(T(x,y,z))
D2           d_2_fuel(T(x,y,z))
SigmaA2      SigmaA_2_fuel(T(x,y,z))
nuSigmaF2    SigmanuF_2_fuel(T(x,y,z))(T(x,y,z))
eSigmaF2     1
SigmaS2.1    SigmaS2.1_fuel(T(x,y,z))
SigmaS2.2    SigmaS1.2_fuel(T(x,y,z))
}

MATERIAL cladding {
D1	     d_1_cladding(T(x,y,z))
SigmaA1      SigmaA_1_cladding(T(x,y,z))
SigmaS1.1    SigmaS1.1_cladding(T(x,y,z))
SigmaS1.2    SigmaS1.2_cladding(T(x,y,z))
D2           d_2_cladding(T(x,y,z))
SigmaA2      SigmaA_2_cladding(T(x,y,z))
SigmaS2.1    SigmaS2.1_cladding(T(x,y,z))
SigmaS2.2    SigmaS1.2_cladding(T(x,y,z))
}

MATERIAL coolant {
D1	     d_1_coolant(T(x,y,z))
SigmaA1      SigmaA_1_coolant(T(x,y,z))
SigmaS1.1    SigmaS1.1_coolant(T(x,y,z))
SigmaS1.2    SigmaS1.2_coolant(T(x,y,z))
D2           d_2_coolant(T(x,y,z))
SigmaA2      SigmaA_2_coolant(T(x,y,z))
SigmaS2.1    SigmaS2.1_coolant(T(x,y,z))
SigmaS2.2    SigmaS1.2_coolant(T(x,y,z))
}

PHYSICAL_ENTITY NAME parede BC mirror
PHYSICAL_ENTITY NAME extremos BC vacuum
PHYSICAL_ENTITY NAME inlet BC vacuum
PHYSICAL_ENTITY NAME outlet BC vacuum

# O mesmo do OpenFOAM
# 1.138e+07 Q/m^3
# 3965 Q

power = 3965.0 

# PRINT TEXT "These two should be equal: " SigmaT1(0,0,0) SigmaA_1_fuel(T(0,0,0))
# PRINT TEXT "This cannot be negative: " SigmaT1(0,0,0)-SigmaS1.1(0,0,0)-SigmaS1.2(0,0,0)

PRINT TEXT "\# building..." NONEWLINE
MILONGA_STEP JUST_BUILD
PRINT TEXT " done."

PRINT "\# solving..." NONEWLINE
MILONGA_STEP JUST_SOLVE
PRINT TEXT " done."

PRINT "\# cpu time [sec] = "  %.2f time_cpu_build "(build) "  %.2f time_cpu_solve "(solve)"  SEP " "

#mypow(x,y,z) := pow(x,y,z)*power

MESH_FILL_VECTOR MESH celula CELLS VECTOR vec_Q FUNCTION pow

WRITE SHM_OBJECT potencias vec_Q

SEM calcMil POST

# MESH_POST FILE_PATH teste4.vtk pow phi1

ENDIF




